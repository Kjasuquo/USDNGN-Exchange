// Code generated by MockGen. DO NOT EDIT.
// Source: internal/port/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kjasuquo/usdngn-exchange/internal/models"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockDB) CreateTransaction(ctx context.Context, transaction models.Transactions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockDBMockRecorder) CreateTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockDB)(nil).CreateTransaction), ctx, transaction)
}

// CreateUser mocks base method.
func (m *MockDB) CreateUser(ctx context.Context, userRequest models.UserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBMockRecorder) CreateUser(ctx, userRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDB)(nil).CreateUser), ctx, userRequest)
}

// GetTransaction mocks base method.
func (m *MockDB) GetTransaction(ctx context.Context, email string) ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, email)
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockDBMockRecorder) GetTransaction(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockDB)(nil).GetTransaction), ctx, email)
}

// GetUserByEmail mocks base method.
func (m *MockDB) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDBMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDB)(nil).GetUserByEmail), ctx, email)
}

// UpdateBalances mocks base method.
func (m *MockDB) UpdateBalances(ctx context.Context, email string, usdBalance, ngnBalance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalances", ctx, email, usdBalance, ngnBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalances indicates an expected call of UpdateBalances.
func (mr *MockDBMockRecorder) UpdateBalances(ctx, email, usdBalance, ngnBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalances", reflect.TypeOf((*MockDB)(nil).UpdateBalances), ctx, email, usdBalance, ngnBalance)
}

// MockRates is a mock of Rates interface.
type MockRates struct {
	ctrl     *gomock.Controller
	recorder *MockRatesMockRecorder
}

// MockRatesMockRecorder is the mock recorder for MockRates.
type MockRatesMockRecorder struct {
	mock *MockRates
}

// NewMockRates creates a new mock instance.
func NewMockRates(ctrl *gomock.Controller) *MockRates {
	mock := &MockRates{ctrl: ctrl}
	mock.recorder = &MockRatesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRates) EXPECT() *MockRatesMockRecorder {
	return m.recorder
}

// GetRates mocks base method.
func (m *MockRates) GetRates(ctx context.Context) (models.Rates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRates", ctx)
	ret0, _ := ret[0].(models.Rates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRates indicates an expected call of GetRates.
func (mr *MockRatesMockRecorder) GetRates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRates", reflect.TypeOf((*MockRates)(nil).GetRates), ctx)
}
